name: DevSecOps Pipeline
on:
  push:
    branches: [ "master" ]
env:
  AWS_REGION: us-west-2                   # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: jpetstore           # set this to your Amazon ECR repository name
  ECS_SERVICE: jpetstore-service                 # set this to your Amazon ECS service name
  ECS_CLUSTER: jpetstore-cluster                 # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: aws/task_definition.json # set this to the path to your Amazon ECS task definition
  # file, e.g. .aws/task-definition.json
  CONTAINER_NAME: sample-app           # set this to the name of the container in the
  AZURE_WEBAPP_NAME: app2727
  DEPLOYMENT_PLATFORM: aws # 1 for AWS, 2 for Azure, 3 for Google Cloud
  #TARGET: https://securepipeline-ul7wfbu6fa-uc.a.run.app/jpetstore
  #TARGET: http://ecsloadbalancer-1835225366.us-west-2.elb.amazonaws.com/jpetstore
  TARGET: https://devsecops-javademo.azurewebsites.net/jpetstore/
jobs:
  SonarCloud:
    name: SAST Scan using Sonar
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: 'zulu' # Alternative distribution options are available.
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=dky815_Secure-CI-CD-Pipelines-with-GitHub-Actions -Dmaven.test.skip=true

  Gitleaks:
    name: Secret Scan using Gitleaks
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  CodeQL-Build:
    name: SAST Scan using CodeQL
    runs-on: ubuntu-latest
    permissions:

      security-events: write

      actions: read
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          language: 'java'

      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  GitGuardian:
      name: Secret Scan using Gitleaks
      runs-on: ubuntu-latest
      steps:
        - name: Checkout
          uses: actions/checkout@v2
          with:
            fetch-depth: 0 # fetch all history so multiple commits can be scanned
        - name: GitGuardian scan
          uses: GitGuardian/ggshield-action@master
          with:
            args: -v --all-policies
          env:
            GITHUB_PUSH_BEFORE_SHA: ${{ github.event.before }}
            GITHUB_PUSH_BASE_SHA: ${{ github.event.base }}
            GITHUB_PULL_BASE_SHA: ${{ github.event.pull_request.base.sha }}
            GITHUB_DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
            GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}

  Shift-left:
    name: SAST Scan using ShiftLeft
    runs-on: ubuntu-latest
    steps:
      - name: Perform Scan
        uses: ShiftLeftSecurity/scan-action@master
        with:
          type: "credscan,python"
        env:
          WORKSPACE: https://github.com/${{ github.repository }}/blob/${{ github.sha }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/upload-artifact@v1
        with:
          name: reports
          path: reports

  Renovate:
    name: Dependency updates scan using Renovate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3.3.0
      - name: Self-hosted Renovate
        uses: renovatebot/github-action@v36.0.0
        with:
          renovate-version: 35.0.0
          token: ${{ secrets.RENOVATE_TOKEN }}

  Fossa:
    name: SCA Scan using Fossa
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: fossas/fossa-action@main # Use a specific version if locking is preferred
        with:
          api-key: ${{ secrets.FOSSA_API_KEY }}
          
  TruffleHog:
    name: Secret Scan using TruffleHog
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

  SnykScan:
    name: SCA Scan using Snyk
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up Maven
        run: mvn -N io.takari:maven:wrapper -Dmaven=3.8.2
      - name: Run Snyk to check for vulnerabilities
        continue-on-error: true
        uses: snyk/actions/maven-3-jdk-11@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --sarif-file-output=snyk.sarif
      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk.sarif

  Semgrep:
    permissions: write-all
    name: SAST Scan using Semgrep
    runs-on: ubuntu-latest

    container:
      image: returntocorp/semgrep

    if: (github.actor != 'dependabot[bot]')

    steps:
      - uses: actions/checkout@v3
      - run: semgrep ci --sarif --output=semgrep.sarif
        env:
           SEMGREP_RULES: p/default
      - name: Upload SARIF file for GitHub Advanced Security Dashboard
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: semgrep.sarif
        if: always()

  Deploy-to-aws:
    name: Deploy to AWS & Docker Scan using Trivy
    if: ${{ vars.DEPLOYMENT_PLATFORM == 'aws'}}  # AWS
    runs-on: ubuntu-latest
    environment: production
    needs: [SonarCloud,SnykScan,Gitleaks,GitGuardian,CodeQL-Build,Semgrep, Fossa, Renovate, Shift-left, TruffleHog]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@13d241b293754004c80624b5567555c4a39ffbe3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@aaf69d68aa3fb14c1d5a6be9ac61fe15b48453a2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.build-image.outputs.image }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@97587c9d45a4930bf0e3da8dd2feb2a463cf4a3a
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@3cc43061dd30ad47511af35bca46e2c1435b9035
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

  Build-and-push-to-ghcr:
    if: ${{ vars.DEPLOYMENT_PLATFORM == 'azure'}}  # Azure
    runs-on: ubuntu-latest
    name: Build and push docker image to ghcr
    needs: [SonarCloud,SnykScan,Gitleaks,GitGuardian,CodeQL-Build,Semgrep, Fossa, Renovate, Shift-left, TruffleHog]
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to GitHub container registry
        uses: docker/login-action@v1.10.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Lowercase the repo name
        run: echo "REPO=${GITHUB_REPOSITORY,,}" >>${GITHUB_ENV}

      - name: Build and push container image to registry
        id: build-image
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ghcr.io/${{ env.REPO }}:${{ github.sha }}
          file: ./Dockerfile    

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'ghcr.io/${{ env.REPO }}:${{ github.sha }}'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
          
  Deploy-to-azure-web-app:
    runs-on: ubuntu-latest
    name: Deploy container to Azure Web App
    needs: build-and-push-to-ghcr

    environment:
      name: 'production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Lowercase the repo name
        run: echo "REPO=${GITHUB_REPOSITORY,,}" >>${GITHUB_ENV}

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@0b651ed7546ecfc75024011f76944cb9b381ef1e
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          images: 'ghcr.io/${{ env.REPO }}:${{ github.sha }}'

  Deploy-to-google-cloud:
    if: ${{ vars.DEPLOYMENT_PLATFORM == 'gc'}}
    needs: [SonarCloud, SnykScan,Gitleaks,GitGuardian,CodeQL-Build,Semgrep, Fossa, Renovate, Shift-left, TruffleHog]
    name: Deploy to Google Cloud & Docker Scan using Trivy
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: gcr.io/${{ vars.GCP_PROJECT_ID }}/${{ vars.GCP_APP_NAME }}
    steps:
      - name: Login
        uses: google-github-actions/setup-gcloud@v0
        with:
          project_id: ${{ vars.GCP_PROJECT_ID }}
          service_account_email: ${{ vars.GCP_EMAIL }}
          service_account_key: ${{ secrets.GCP_CREDENTIALS }}

      - name: Configure Docker
        run: gcloud auth configure-docker --quiet

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Build Docker image
        id: build-image
        run: |
          docker build . -t $IMAGE_NAME
          echo "image=$IMAGE_NAME" >> $GITHUB_OUTPUT

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.build-image.outputs.image }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Push Docker image
        run: docker push $IMAGE_NAME

      - name: Deploy Docker image
        run: gcloud run deploy ${{ vars.GCP_PROJECT_ID }} --image $IMAGE_NAME --region us-central1 --platform managed

  Zap-scan:
    runs-on: ubuntu-latest
    name: DAST Scan using ZAP
    if: ${{ always() }}
    needs: [deploy-to-aws, deploy-to-azure-web-app, deploy-to-google-cloud]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: master
      - name: ZAP Scan
        uses: zaproxy/action-baseline@v0.6.1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          docker_name: 'owasp/zap2docker-stable'
          target: ${{ env.TARGET }}
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

  Nuclei-scan:
    name: DAST Scan using Nuclei
    needs: [Zap-scan]
    if: ${{ always() }}
    runs-on: ubuntu-latest
    # needs: [upload_file]
    steps:
      - uses: actions/checkout@v3
      - name: Run ESLint
        run: node_modules/.bin/eslint build docs lib script spec-main -f node_modules/@microsoft/eslint-formatter-sarif/sarif.js -o results.sarif || true

      - uses: actions/checkout@v2
      - name: Nuclei - Vulnerability Scan
        uses: projectdiscovery/nuclei-action@main
        with:
          target: ${{ env.TARGET }}
          sarif-export: results.sarif

      - name: GitHub Security Dashboard Alerts update
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: results.sarif

      - name: GitHub Workflow artifacts
        uses: actions/upload-artifact@v2
        with:
          name: nuclei.log
          path: nuclei.log